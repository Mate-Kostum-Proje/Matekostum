// <auto-generated />
using System;
using Mate.DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mate.DAL.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20241211110223_CreateInit")]
    partial class CreateInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mate.Entities.Concrete.Basket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.BasketDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasMaxLength(500)
                        .HasColumnType("int");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSale")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductSize")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("UnitPiceForRent")
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.Property<int?>("UnitPriceForSale")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("BasketDetails");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.CommUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CommUsers");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.FotoGalery", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("FotoGaleries");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.MainMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CssName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("ParentMenuId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParentMenuId1");

                    b.HasIndex("RolesId");

                    b.ToTable("MainMenu");

                    b.HasData(
                        new
                        {
                            Id = "Home",
                            ActionName = "Index",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4824),
                            CssName = "",
                            MenuName = "Home",
                            RoleId = 1
                        },
                        new
                        {
                            Id = "About",
                            ActionName = "",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4838),
                            CssName = "",
                            MenuName = "About",
                            RoleId = 1
                        },
                        new
                        {
                            Id = "ProductRent",
                            ActionName = "ProductRent",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4841),
                            CssName = "",
                            MenuName = "ProductRent",
                            RoleId = 1
                        },
                        new
                        {
                            Id = "ProductSale",
                            ActionName = "ProductSale",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4843),
                            CssName = "",
                            MenuName = "ProductSale",
                            RoleId = 1
                        },
                        new
                        {
                            Id = "Galery",
                            ActionName = "Galery",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4846),
                            CssName = "",
                            MenuName = "Galery",
                            RoleId = 1
                        },
                        new
                        {
                            Id = "Comm",
                            ActionName = "Comm",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Home",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 448, DateTimeKind.Local).AddTicks(4848),
                            CssName = "",
                            MenuName = "Comm",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("SituationName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SituationName");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasMaxLength(500)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductSize")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("UnitPiceForRent")
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.Property<int?>("UnitPriceForSale")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersDetail");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.OrderSituation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Situation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("OrdersSituation");

                    b.HasData(
                        new
                        {
                            Id = "808b204e-5175-43d4-bc40-2b84d28a6d6e",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 450, DateTimeKind.Local).AddTicks(7887),
                            Situation = "Siparişiniz Alındı"
                        },
                        new
                        {
                            Id = "b90decc9-e929-4dc4-b8c0-b1c0737f0eab",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 450, DateTimeKind.Local).AddTicks(7905),
                            Situation = "Siparişiniz Hazırlanıyor"
                        },
                        new
                        {
                            Id = "b0d93886-08d4-4aa4-9728-facf9d7e393d",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 450, DateTimeKind.Local).AddTicks(7910),
                            Situation = "Siparişiniz Kargoya verildi"
                        },
                        new
                        {
                            Id = "ae01048d-c951-43f8-8524-cb9a4a2bad52",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 450, DateTimeKind.Local).AddTicks(7914),
                            Situation = "Siparişiniz Tamamlandı"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSale")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductRegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSubRegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("UnitPriceForRent")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPriceForSale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductRegionId");

                    b.HasIndex("ProductSubRegionId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = "1boş",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(341),
                            Name = " "
                        },
                        new
                        {
                            Id = "2halkoyun",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(360),
                            Name = "HALK OYUNLARI KIYAFETLERİ"
                        },
                        new
                        {
                            Id = "3kına",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(365),
                            Name = "BİNDALLI VE KINA"
                        },
                        new
                        {
                            Id = "4dans",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(368),
                            Name = "STİLİZE DANS"
                        },
                        new
                        {
                            Id = "5rond",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(377),
                            Name = "ROND TÖREN"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductRegion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductRegions");

                    b.HasData(
                        new
                        {
                            Id = "AKDENİZ",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2549),
                            Name = "AKDENİZ"
                        },
                        new
                        {
                            Id = "EGE",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2567),
                            Name = "EGE"
                        },
                        new
                        {
                            Id = "DOGU ANADOLU",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2571),
                            Name = "DOGU ANADOLU"
                        },
                        new
                        {
                            Id = "GÜNEYDOGU ANADOLU",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2575),
                            Name = "GÜNEYDOGU ANADOLU"
                        },
                        new
                        {
                            Id = "İÇ ANADOLU",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2579),
                            Name = "İÇ ANADOLU"
                        },
                        new
                        {
                            Id = "KAFKAS",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2585),
                            Name = "KAFKAS"
                        },
                        new
                        {
                            Id = "KARADENİZ",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2589),
                            Name = "KARADENİZ"
                        },
                        new
                        {
                            Id = "MARMARA",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2597),
                            Name = "MARMARA"
                        },
                        new
                        {
                            Id = "TRAKYA",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(2600),
                            Name = "TRAKYA"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductSubRegion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductSubRegions");

                    b.HasData(
                        new
                        {
                            Id = "ADIYAMAN",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4753),
                            Name = "ADIYAMAN"
                        },
                        new
                        {
                            Id = "ANKARA",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4770),
                            Name = "ANKARA"
                        },
                        new
                        {
                            Id = "ARTVİN",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4774),
                            Name = "ARTVİN"
                        },
                        new
                        {
                            Id = "BİLECİK",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4778),
                            Name = "BİLECİK"
                        },
                        new
                        {
                            Id = "BİTLİS",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4782),
                            Name = "BİTLİS"
                        },
                        new
                        {
                            Id = "BOLU",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4787),
                            Name = "BOLU"
                        },
                        new
                        {
                            Id = "ÇİFTETELLİ",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4803),
                            Name = "ÇİFTETELLİ"
                        },
                        new
                        {
                            Id = "BURDUR",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4807),
                            Name = "BURDUR"
                        },
                        new
                        {
                            Id = "DİYARBAKIR",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4811),
                            Name = "DİYARBAKIR"
                        },
                        new
                        {
                            Id = "ELAZIĞ",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4815),
                            Name = "ELAZIĞ"
                        },
                        new
                        {
                            Id = "GAZİANTEP",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4819),
                            Name = "GAZİANTEP"
                        },
                        new
                        {
                            Id = "GİRESUN",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4823),
                            Name = "GİRESUN"
                        },
                        new
                        {
                            Id = "HAKKARİ",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4827),
                            Name = "HAKKARİ"
                        },
                        new
                        {
                            Id = "HALAY",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4831),
                            Name = "HALAY"
                        },
                        new
                        {
                            Id = "ROMAN",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4837),
                            Name = "ROMAN"
                        },
                        new
                        {
                            Id = "SİLİFKE",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4840),
                            Name = "SİLİFKE"
                        },
                        new
                        {
                            Id = "TEKE",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4844),
                            Name = "TEKE"
                        },
                        new
                        {
                            Id = "TRABZON",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4849),
                            Name = "TRABZON"
                        },
                        new
                        {
                            Id = "ÜSKÜP",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4852),
                            Name = "ÜSKÜP"
                        },
                        new
                        {
                            Id = "VAN",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4856),
                            Name = "VAN"
                        },
                        new
                        {
                            Id = "ZEYBEK",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(4859),
                            Name = "ZEYBEK"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ad",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(6980),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = "us",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 451, DateTimeKind.Local).AddTicks(7001),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.SiteCommInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GSM")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SocialMedias")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GSM")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("SiteCommInfos");

                    b.HasData(
                        new
                        {
                            Id = "2c272b5e-1d37-4c9f-b5ff-cc3bde70c145",
                            CreatedAt = new DateTime(2024, 12, 11, 14, 2, 23, 455, DateTimeKind.Local).AddTicks(766),
                            Email = "matekostum@gmail.com",
                            GSM = "Kiralama WhatsApp İletişim Hattı\r\n\r\n0530 909 11 34 – Erdem\r\n\r\nİmalat\r\n\r\n0532 321 64 97 – İsmail\r\n0532 267 23 86 – Ergun",
                            Phone = "0212 549 77 34",
                            SocialMedias = "Facebook\r\nfacebook.com/mate.kostum\r\n\r\n\r\nInstagram\r\ninstagram.com/matekostum",
                            WorkingHours = "Hafta içi: 09:00 – 17:30\r\n\r\nCumartesi: 09:00 – 13:00"
                        });
                });

            modelBuilder.Entity("Mate.Entities.Concrete.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GSM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GSM")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TcNo")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("RoleUserInfo", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUserInfo");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Basket", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.UserInfo", "UserInfos")
                        .WithMany("BasketList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.BasketDetail", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.Basket", "Baskets")
                        .WithMany("BasketDetails")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mate.Entities.Concrete.Product", "Products")
                        .WithMany("BasketDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baskets");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.MainMenu", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.MainMenu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId1");

                    b.HasOne("Mate.Entities.Concrete.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId");

                    b.Navigation("ParentMenu");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Order", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.OrderSituation", "OrderSituations")
                        .WithMany("Orders")
                        .HasForeignKey("SituationName");

                    b.HasOne("Mate.Entities.Concrete.UserInfo", "UserInfos")
                        .WithMany("OrderList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderSituations");

                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mate.Entities.Concrete.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Product", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.ProductCategory", "ProductCategories")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mate.Entities.Concrete.ProductRegion", "ProductRegions")
                        .WithMany("Products")
                        .HasForeignKey("ProductRegionId");

                    b.HasOne("Mate.Entities.Concrete.ProductSubRegion", "ProductSubRegions")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubRegionId");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductRegions");

                    b.Navigation("ProductSubRegions");
                });

            modelBuilder.Entity("RoleUserInfo", b =>
                {
                    b.HasOne("Mate.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mate.Entities.Concrete.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Basket", b =>
                {
                    b.Navigation("BasketDetails");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.OrderSituation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.Product", b =>
                {
                    b.Navigation("BasketDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductRegion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.ProductSubRegion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mate.Entities.Concrete.UserInfo", b =>
                {
                    b.Navigation("BasketList");

                    b.Navigation("OrderList");
                });
#pragma warning restore 612, 618
        }
    }
}
